/*
 * File: app/controller/CCharts.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('OccapiMobile.controller.CCharts', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "button#btnLineChartBack": {
                tap: 'onBtnLineChartBackTap'
            }
        }
    },

    onBtnLineChartBackTap: function(button, e, eOpts) {
        App.VNav.pop();
        App.CCharts.stop();
    },

    start: function() {
        App.deferIds.charts = -1;
        this.load(true);
    },

    load: function(firstTime) {
        Ext.Ajax.request({
            method: "GET",
            params: {
                action: "chart",
                kpi: App.sel.kpiName,
                monitor: App.sel.monitor,
                token: App.user.token
            },
            url: App.s.allowCrossOrigin ? "chart/kpi/{kpi}/monitor/{monitor}/token/{token}" : App.c.apiBaseURL,
            scope: this,
            useDefaultXhrHeader: false,
            success: function(response, opts) {
                var rObj = Ext.decode(response.responseText);

                if(rObj && rObj.flotDTO && rObj.flotDTO.seriesSet) {
                    var seriesSet = rObj.flotDTO.seriesSet;

                    App.sel.chartData = rObj;
                    App.sel.chartLegend = {};

                    if(seriesSet.length > 0) {

                        var seriesData = {};
                        var seriesDataArray = [];

                        Ext.Array.each(seriesSet, function(s, sIdx, alls) {

                            App.sel.chartLegend["y" + (sIdx + 1)] = s.label;

                            Ext.Array.each(s.data, function(data, dataIdx, allData) {
                                var point = seriesData[data[0]];
                                if(!point) {
                                    point = {};
                                }
                                point.x = data[0];
                                point["y" + (sIdx + 1)] = data[1];
                                seriesData[data[0]] = point;
                            });
                        });

                        Ext.Object.each(seriesData, function(key, obj) {
                            seriesDataArray.push(obj);
                        });

                        App.storeCharts.setData(seriesDataArray);

                        if(firstTime) {
                            App.VLineChart = App.VNav.push({
                                xtype: "VLineChart",
                                title: App.recKPI.get("kpiCaption")
                            });
                            App.VLineChart.down("titlebar").setTitle(App.recKPI.get("kpiCaption"));

                            Ext.Array.each(App.VLineChart.down("chart").getSeries(), function(chartS, chartSIdx, allChartS) {
                                var visible = typeof seriesSet[chartSIdx] != "undefined";

                                chartS.setShowInLegend(visible);
                                chartS.setHidden(!visible);
                            });
                            App.VLineChart.down("chart").refreshLegendStore();
                        }
                    }
                    else {
                        console.log("No data to plot: " + response.status);
                    }
                }

                App.unmask();

                if(App.deferIds.charts && settings.get(settings.names.chartRefreshEnabled)) {
                    App.deferIds.charts = Ext.defer(function() {
                        this.load(false);
                    }, settings.get(settings.names.chartRefreshTimeout) * 1000, this, []);
                }
            }/*,
            failure: function(response, opts) {
                console.log("Server failure with status code: " + response.status);
                this.refresh();
            }*/
        });
    },

    stop: function() {
        clearTimeout(App.deferIds.charts);
        App.deferIds.charts = null;

        App.sel.kpiName = null;
        App.set.monitor = null;
    }

});